name: Build and Deploy
on:
  push:
    branches:
      - master
    paths:
      - .github/workflows/**
      - e2eTests/**
      - tests/**
      - todo_app/**
      - terraform/**
      - Dockerfile
      - poetry.lock
  pull_request:
    paths:
      - .github/workflows/**
      - e2eTests/**
      - tests/**
      - todo_app/**
      - terraform/**
      - Dockerfile
      - poetry.lock

jobs:
  test:
    name: Build and test
    runs-on: ubuntu-latest
    outputs:
      cosmos_connection_string: ${{ steps.tf-apply.outputs.cosmos_connection_string }}
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      TF_VAR_prefix: "e2e-${{ github.run_number }}-${{ github.run_attempt }}"
      GH_TOKEN: ${{ secrets.GH_TOKEN }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Cache Docker layers
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-   

    - name: Integration test build
      uses: docker/build-push-action@v6
      with:
        context: .
        target: pipeline_integration_tests
        tags: todo-app:pipeline_integration_tests
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
        github-token: ${{ secrets.CACHE_GITHUB_TOKEN }}
        load: true

    - name: Run integration tests
      run: docker run todo-app:pipeline_integration_tests

    - name: e2e tests build
      uses: docker/build-push-action@v6
      with:
        context: .
        target: pipeline_e2e_tests
        tags: todo-app:pipeline_e2e_tests
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
        github-token: ${{ secrets.CACHE_GITHUB_TOKEN }}
        load: true

    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache      

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "^1.9.1"
        terraform_wrapper: false

    - name: Terraform Init
      working-directory: terraform/modules/db
      run: terraform init

    - name: Terraform Plan
      working-directory: terraform/modules/db
      run: terraform plan

    - name: Terraform Apply
      id: tf-apply
      working-directory: terraform/modules/db
      run: |
        terraform apply --auto-approve
        echo cosmos_connection_string=$(terraform output -raw cosmos_connection_string) >> "$GITHUB_OUTPUT"

    - name: Run e2e tests
      run: >
        docker run
        -e FLASK_APP=todo_app/app
        -e SECRET_KEY="notarealsecretkey12345"
        -e COSMOS_CONNECTION_STRING="${{ steps.tf-apply.outputs.cosmos_connection_string }}"
        --network host
        todo-app:pipeline_e2e_tests

    - name: Terraform Destroy
      if: always()
      working-directory: terraform/modules/db
      run: terraform destroy --auto-approve

    - name: Check for vulnerabilities
      uses: snyk/actions/python-3.10@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    - name: Report pipeline status
      if: always()
      id: slack
      uses: slackapi/slack-github-action@v1.26.0
      with:
        payload: |
          {
            "name": ${{ toJson(format('Build and test: {0}', github.event.head_commit.message)) }},
            "status": "${{ job.status == 'success' && 'Success :tick:' || 'Failure :no-cross:' }}"
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  deploy:
    name: Build and deploy
    needs: test
#    if:  github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      TF_VAR_prefix: "dev"
      TF_VAR_secret_key: ${{ secrets.SECRET_KEY }}
      TF_VAR_github_client_id: ${{ secrets.OIDC_CLIENT_ID }}
      TF_VAR_github_client_secret: ${{ secrets.OIDC_CLIENT_SECRET }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-   

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push production image
        uses: docker/build-push-action@v6
        with:
          push: true
          context: .
          target: production
          tags: trwoodward/todo-app, trwoodward/todo-app:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          github-token: ${{ secrets.CACHE_GITHUB_TOKEN }}

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache   

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "^1.9.1"
          terraform_wrapper: false

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Plan
        working-directory: terraform
        run: terraform plan

      - name: Deploy and restart
        working-directory: terraform
        run: |
          terraform apply --auto-approve
          curl -dH -X POST "$(terraform output -raw cd_webhook)"

      - name: Report pipeline status
        if: always()
        id: slack
        uses: slackapi/slack-github-action@v1.26.0
        with:
          payload: |
            {
              "name": ${{ toJson(format('Deploy: {0}', github.event.head_commit.message)) }},
              "status": "${{ job.status == 'success' && 'Success :tick:' || 'Failure :no-cross:' }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
